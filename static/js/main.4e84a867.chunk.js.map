{"version":3,"sources":["map-style.js","default-geojson.js","App.js","reportWebVitals.js","index.js"],"names":["fillStyle","id","type","paint","strokeStyle","defaultGeojson","App","useState","undefined","selectedFeature","setSelectedFeature","geojsonData","setGeojsonData","width","window","innerWidth","height","innerHeight","latitude","longitude","zoom","bearing","pitch","viewport","setViewport","getViewport","feature","bbox","minLng","minLat","maxLng","maxLat","WebMercatorViewport","fitBounds","padding","transitionInterpolator","FlyToInterpolator","transitionDuration","jsonStr","useMemo","beautify","prefersDarkMode","useMediaQuery","theme","createTheme","palette","ThemeProvider","CssBaseline","mapStyle","onClick","event","features","console","log","onViewportChange","mapboxApiAccessToken","interactiveLayerIds","data","Object","keys","properties","map","key","Paper","class","language","value","onChange","newValue","e","geojson","JSON","parse","SyntaxError","message","options","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e84a867.chunk.js","sourcesContent":["// For more information on data-driven styles, see https://www.mapbox.com/help/gl-dds-ref/\nexport const fillStyle = {\n  id: 'fill-style',\n  type: 'fill',\n  paint: {\n    'fill-color': '#00ff00',\n    'fill-opacity': 0.6,\n  }\n};\n\nexport const strokeStyle = {\n  id: 'stroke-style',\n  type: 'line',\n  paint: {\n    'line-color': '#00007e',\n    'line-width': 3,\n  }\n};\n","const defaultGeojson = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"MultiPolygon\",\n        \"coordinates\": [\n          [\n            [\n              [ -93.7953988092302, 42.9326505395337 ],\n              [ -93.795407392299, 42.9335523063868 ],\n              [ -93.798153974315, 42.9335428803207 ],\n              [ -93.7981368081774, 42.9326442553978 ],\n              [ -93.7953988092302, 42.9326505395337 ]\n            ]\n          ]\n        ]\n      },\n      \"properties\": {\n        \"name\": \"Little Field Boundary\"\n      }\n    }\n  ]\n}\n\nexport default defaultGeojson\n","import * as React from 'react'\nimport {useState, useMemo} from 'react'\n\nimport MapGL, {Source, Layer, WebMercatorViewport, FlyToInterpolator} from 'react-map-gl'\nimport bbox from '@turf/bbox'\n\nimport MonacoEditor from '@uiw/react-monacoeditor'\nimport beautify from 'json-beautify'\n\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Paper from '@material-ui/core/Paper'\n\nimport './App.css'\nimport {fillStyle, strokeStyle} from './map-style.js'\nimport defaultGeojson from './default-geojson.js'\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiamFjb2JyZGFsdG9uIiwiYSI6ImNrc2Y0cmNvYTE2dDAydnAzMGRkdWViaTEifQ.zZq-v2Afolrv5I_id2-yRA' // Set your mapbox token here\n\nexport default function App() {\n  const [selectedFeature, setSelectedFeature] = useState(undefined)\n  const [geojsonData, setGeojsonData] = useState(defaultGeojson)\n  const [viewport, setViewport] = useState({\n    width: window.innerWidth * .6, // NOTE: this is a guess of the map width\n    height: window.innerHeight,\n    latitude: 42.9330972,\n    longitude: -93.796779,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0\n  })\n\n  const getViewport = (viewport, feature) => {\n    const [minLng, minLat, maxLng, maxLat] = bbox(feature)\n    const vp = new WebMercatorViewport(viewport)\n    const {longitude, latitude, zoom} = vp.fitBounds(\n      [ [minLng, minLat], [maxLng, maxLat] ],\n      { padding: 20 }\n    )\n\n    return {\n      ...viewport,\n      longitude,\n      latitude,\n      zoom,\n      transitionInterpolator: new FlyToInterpolator(),\n      transitionDuration: 1000\n    }\n  }\n\n  const onClick = event => {\n    const feature = event.features[0]\n    console.log('event', event, 'feature', feature)\n    if (feature) {\n      setViewport(getViewport(viewport, feature))\n      setSelectedFeature(feature)\n    } else {\n      setSelectedFeature(undefined)\n    }\n  }\n\n  const onEditorChange = (newValue, e) => {\n    try {\n      const geojson = JSON.parse(newValue)\n      setGeojsonData(geojson)\n      setViewport(getViewport(viewport, geojson))\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        setGeojsonData(undefined)\n      } else {\n        console.log('Error:', e, e.message)\n      }\n    }\n\n  }\n\n  const jsonStr = useMemo(() => beautify(geojsonData, null, 2, 100), [geojsonData])\n\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)')\n  const theme = useMemo(\n    () =>\n    createTheme({\n      palette: {\n        type: prefersDarkMode ? 'dark' : 'light',\n      },\n    }),\n    [prefersDarkMode],\n  )\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline/>\n      <div>\n        <div id=\"map\">\n          <MapGL\n            {...viewport}\n            width=\"100%\"\n            height=\"100%\"\n            mapStyle=\"mapbox://styles/mapbox/light-v9\"\n            onClick={onClick}\n            onViewportChange={setViewport}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n            interactiveLayerIds={['fill-style']}\n          >\n            { geojsonData && (\n              <Source type=\"geojson\" data={geojsonData}>\n                <Layer {...fillStyle} />\n                <Layer {...strokeStyle} />\n              </Source>\n            )}\n          </MapGL>\n        </div>\n        <div id=\"panel\">\n          <div id=\"props\">\n            {\n              Object.keys(selectedFeature?.properties || {}).map(key => (<Paper><div class=\"prop-value\">{key} - {selectedFeature.properties[key]}</div></Paper>))\n            }\n          </div>\n          <div id=\"editor\">\n            <MonacoEditor\n              language=\"json\"\n              width=\"100%\"\n              value={jsonStr}\n              onChange={onEditorChange}\n              options={{\n                theme: 'vs-dark',\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </ThemeProvider>\n  )\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}